{"ITokenMarketplace.sol":{"content":"pragma solidity ^0.4.24;\n\ninterface ITokenMarketplace {\n\n  event BidPlaced(\n    uint256 indexed _tokenId,\n    address indexed _currentOwner,\n    address indexed _bidder,\n    uint256 _amount\n  );\n\n  event BidWithdrawn(\n    uint256 indexed _tokenId,\n    address indexed _bidder\n  );\n\n  event BidAccepted(\n    uint256 indexed _tokenId,\n    address indexed _currentOwner,\n    address indexed _bidder,\n    uint256 _amount\n  );\n\n  event BidRejected(\n    uint256 indexed _tokenId,\n    address indexed _currentOwner,\n    address indexed _bidder,\n    uint256 _amount\n  );\n\n  event AuctionEnabled(\n    uint256 indexed _tokenId,\n    address indexed _auctioneer\n  );\n\n  event AuctionDisabled(\n    uint256 indexed _tokenId,\n    address indexed _auctioneer\n  );\n\n  function placeBid(uint256 _tokenId) payable external returns (bool success);\n\n  function withdrawBid(uint256 _tokenId) external returns (bool success);\n\n  function acceptBid(uint256 _tokenId) external returns (uint256 tokenId);\n\n  function rejectBid(uint256 _tokenId) external returns (bool success);\n\n  function enableAuction(uint256 _tokenId) external returns (bool success);\n\n  function disableAuction(uint256 _tokenId) external returns (bool success);\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}"},"Pausable.sol":{"content":"pragma solidity ^0.4.24;\n\n\nimport \"./Ownable.sol\";\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}"},"RBAC.sol":{"content":"pragma solidity ^0.4.24;\n\nimport \"./Roles.sol\";\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string =\u003e Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i \u003c _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}"},"Roles.sol":{"content":"pragma solidity ^0.4.24;\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address =\u003e bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address\u0027 access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b \u003e 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn\u0027t hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b \u003c= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c \u003e= _a);\n    return c;\n  }\n}"},"TokenMarketplace.sol":{"content":"pragma solidity ^0.4.24;\n\nimport \"./Roles.sol\";\nimport \"./Pausable.sol\";\nimport \"./Whitelist.sol\";\nimport \"./SafeMath.sol\";\nimport \"./ITokenMarketplace.sol\";\n\ninterface IKODAV2 {\n  function ownerOf(uint256 _tokenId) external view returns (address _owner);\n\n  function exists(uint256 _tokenId) external view returns (bool _exists);\n\n  function editionOfTokenId(uint256 _tokenId) external view returns (uint256 tokenId);\n\n  function artistCommission(uint256 _tokenId) external view returns (address _artistAccount, uint256 _artistCommission);\n\n  function editionOptionalCommission(uint256 _tokenId) external view returns (uint256 _rate, address _recipient);\n\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n}\n\ncontract TokenMarketplace is Whitelist, Pausable, ITokenMarketplace {\n  using SafeMath for uint256;\n\n  event UpdatePlatformPercentageFee(uint256 _oldPercentage, uint256 _newPercentage);\n  event UpdateRoyaltyPercentageFee(uint256 _oldPercentage, uint256 _newPercentage);\n\n  struct Offer {\n    address bidder;\n    uint256 offer;\n  }\n\n  // Min increase in bid amount\n  uint256 public minBidAmount = 0.04 ether;\n\n  // Interface into the KODA world\n  IKODAV2 public kodaAddress;\n\n  // KO account which can receive commission\n  address public koCommissionAccount;\n\n  uint256 public artistRoyaltyPercentage = 50;\n  uint256 public platformFeePercentage = 30;\n\n  // Token ID to Offer mapping\n  mapping(uint256 =\u003e Offer) offers;\n\n  // Explicitly disable sales for specific tokens\n  mapping(uint256 =\u003e bool) disabledTokens;\n\n  ///////////////\n  // Modifiers //\n  ///////////////\n\n  modifier onlyWhenOfferOwner(uint256 _tokenId) {\n    require(offers[_tokenId].bidder == msg.sender, \"Not offer maker\");\n    _;\n  }\n\n  modifier onlyWhenTokenExists(uint256 _tokenId) {\n    require(kodaAddress.exists(_tokenId), \"Token does not exist\");\n    _;\n  }\n\n  modifier onlyWhenBidOverMinAmount(uint256 _tokenId) {\n    require(msg.value \u003e= offers[_tokenId].offer.add(minBidAmount), \"Offer not enough\");\n    _;\n  }\n\n  modifier onlyWhenTokenAuctionEnabled(uint256 _tokenId) {\n    require(!disabledTokens[_tokenId], \"Token not enabled for offers\");\n    _;\n  }\n\n  /////////////////\n  // Constructor //\n  /////////////////\n\n  // Set the caller as the default KO account\n  constructor(IKODAV2 _kodaAddress, address _koCommissionAccount) public {\n    kodaAddress = _kodaAddress;\n    koCommissionAccount = _koCommissionAccount;\n    super.addAddressToWhitelist(msg.sender);\n  }\n\n  //////////////////\n  // User Actions //\n  //////////////////\n\n  function placeBid(uint256 _tokenId)\n  public\n  payable\n  whenNotPaused\n  onlyWhenTokenExists(_tokenId)\n  onlyWhenBidOverMinAmount(_tokenId)\n  onlyWhenTokenAuctionEnabled(_tokenId)\n  {\n    _refundHighestBidder(_tokenId);\n\n    offers[_tokenId] = Offer(msg.sender, msg.value);\n\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\n\n    emit BidPlaced(_tokenId, currentOwner, msg.sender, msg.value);\n  }\n\n  function withdrawBid(uint256 _tokenId)\n  public\n  whenNotPaused\n  onlyWhenTokenExists(_tokenId)\n  onlyWhenOfferOwner(_tokenId)\n  {\n    _refundHighestBidder(_tokenId);\n\n    emit BidWithdrawn(_tokenId, msg.sender);\n  }\n\n  function rejectBid(uint256 _tokenId)\n  public\n  whenNotPaused\n  {\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\n    require(currentOwner == msg.sender, \"Not token owner\");\n\n    uint256 currentHighestBiddersAmount = offers[_tokenId].offer;\n    require(currentHighestBiddersAmount \u003e 0, \"No offer open\");\n\n    address currentHighestBidder = offers[_tokenId].bidder;\n\n    _refundHighestBidder(_tokenId);\n\n    emit BidRejected(_tokenId, currentOwner, currentHighestBidder, currentHighestBiddersAmount);\n  }\n\n  function acceptBid(uint256 _tokenId)\n  public\n  whenNotPaused\n  {\n    address currentOwner = kodaAddress.ownerOf(_tokenId);\n    require(currentOwner == msg.sender, \"Not token owner\");\n\n    uint256 winningOffer = offers[_tokenId].offer;\n    require(winningOffer \u003e 0, \"No offer open\");\n\n    address winningBidder = offers[_tokenId].bidder;\n\n    delete offers[_tokenId];\n\n    // Get edition no.\n    uint256 editionNumber = kodaAddress.editionOfTokenId(_tokenId);\n\n    _handleFunds(editionNumber, winningOffer, currentOwner);\n\n    kodaAddress.safeTransferFrom(msg.sender, winningBidder, _tokenId);\n\n    emit BidAccepted(_tokenId, currentOwner, winningBidder, winningOffer);\n\n  }\n\n  function _refundHighestBidder(uint256 _tokenId) internal {\n    // Get current highest bidder\n    address currentHighestBidder = offers[_tokenId].bidder;\n\n    // Get current highest bid amount\n    uint256 currentHighestBiddersAmount = offers[_tokenId].offer;\n\n    if (currentHighestBidder != address(0) \u0026\u0026 currentHighestBiddersAmount \u003e 0) {\n\n      // Clear out highest bidder\n      delete offers[_tokenId];\n\n      // Refund it\n      currentHighestBidder.transfer(currentHighestBiddersAmount);\n    }\n  }\n\n  function _handleFunds(uint256 _editionNumber, uint256 _offer, address _currentOwner) internal {\n\n    // Get existing artist commission\n    (address artistAccount, uint256 artistCommissionRate) = kodaAddress.artistCommission(_editionNumber);\n\n    // Get existing optional commission\n    (uint256 optionalCommissionRate, address optionalCommissionRecipient) = kodaAddress.editionOptionalCommission(_editionNumber);\n\n    _splitFunds(artistAccount, artistCommissionRate, optionalCommissionRecipient, optionalCommissionRate, _offer, _currentOwner);\n  }\n\n  function _splitFunds(\n    address _artistAccount,\n    uint256 _artistCommissionRate,\n    address _optionalCommissionRecipient,\n    uint256 _optionalCommissionRate,\n    uint256 _offer,\n    address _currentOwner\n  ) internal {\n\n    // Work out total % of royalties to payout = creator royalties + KO commission\n    uint256 totalCommissionPercentageToPay = platformFeePercentage.add(artistRoyaltyPercentage);\n\n    // Send current owner majority share of the offer\n    uint256 totalToSendToOwner = _offer.sub(\n      _offer.div(1000).mul(totalCommissionPercentageToPay)\n    );\n    _currentOwner.transfer(totalToSendToOwner);\n\n    // Send % to KO\n    uint256 koCommission = _offer.div(1000).mul(platformFeePercentage);\n    koCommissionAccount.transfer(koCommission);\n\n    // Send to seller minus royalties and commission\n    uint256 remainingRoyalties = _offer.sub(koCommission).sub(totalToSendToOwner);\n\n    if (_optionalCommissionRecipient == address(0)) {\n      // After KO and Seller - send the rest to the original artist\n      _artistAccount.transfer(remainingRoyalties);\n    } else {\n      _handleOptionalSplits(_artistAccount, _artistCommissionRate, _optionalCommissionRecipient, _optionalCommissionRate, remainingRoyalties);\n    }\n  }\n\n  function _handleOptionalSplits(\n    address _artistAccount,\n    uint256 _artistCommissionRate,\n    address _optionalCommissionRecipient,\n    uint256 _optionalCommissionRate,\n    uint256 _remainingRoyalties\n  ) internal {\n    uint256 _totalCollaboratorsRate = _artistCommissionRate.add(_optionalCommissionRate);\n    uint256 _scaledUpCommission = _artistCommissionRate.mul(10 ** 18);\n\n    // work out % of royalties total to split e.g. 43 / 85 = 50.5882353%\n    uint256 primaryArtistPercentage = _scaledUpCommission.div(_totalCollaboratorsRate);\n\n    uint256 totalPrimaryRoyaltiesToArtist = _remainingRoyalties.mul(primaryArtistPercentage).div(10 ** 18);\n    _artistAccount.transfer(totalPrimaryRoyaltiesToArtist);\n\n    uint256 remainingRoyaltiesToCollaborator = _remainingRoyalties.sub(totalPrimaryRoyaltiesToArtist);\n    _optionalCommissionRecipient.transfer(remainingRoyaltiesToCollaborator);\n  }\n\n  ///////////////////\n  // Query Methods //\n  ///////////////////\n\n  function tokenOffer(uint256 _tokenId) external view returns (address _bidder, uint256 _offer, address _owner, bool _enabled, bool _paused) {\n    Offer memory offer = offers[_tokenId];\n    return (\n    offer.bidder,\n    offer.offer,\n    kodaAddress.ownerOf(_tokenId),\n    !disabledTokens[_tokenId],\n    paused\n    );\n  }\n\n  function determineSaleValues(uint256 _tokenId) external view returns (uint256 _sellerTotal, uint256 _platformFee, uint256 _royaltyFee) {\n    Offer memory offer = offers[_tokenId];\n    uint256 offerValue = offer.offer;\n    uint256 fee = offerValue.div(1000).mul(platformFeePercentage);\n    uint256 royalties = offerValue.div(1000).mul(artistRoyaltyPercentage);\n\n    return (\n    offer.offer.sub(fee).sub(royalties),\n    fee,\n    royalties\n    );\n  }\n\n  ///////////////////\n  // Admin Actions //\n  ///////////////////\n\n  function disableAuction(uint256 _tokenId)\n  public\n  onlyIfWhitelisted(msg.sender)\n  {\n    _refundHighestBidder(_tokenId);\n\n    disabledTokens[_tokenId] = true;\n\n    emit AuctionDisabled(_tokenId, msg.sender);\n  }\n\n  function enableAuction(uint256 _tokenId)\n  public\n  onlyIfWhitelisted(msg.sender)\n  {\n    _refundHighestBidder(_tokenId);\n\n    disabledTokens[_tokenId] = false;\n\n    emit AuctionEnabled(_tokenId, msg.sender);\n  }\n\n  function setMinBidAmount(uint256 _minBidAmount) onlyIfWhitelisted(msg.sender) public {\n    minBidAmount = _minBidAmount;\n  }\n\n  function setKodavV2(IKODAV2 _kodaAddress) onlyIfWhitelisted(msg.sender) public {\n    kodaAddress = _kodaAddress;\n  }\n\n  function setKoCommissionAccount(address _koCommissionAccount) public onlyIfWhitelisted(msg.sender) {\n    require(_koCommissionAccount != address(0), \"Invalid address\");\n    koCommissionAccount = _koCommissionAccount;\n  }\n\n  function setArtistRoyaltyPercentage(uint256 _artistRoyaltyPercentage) public onlyIfWhitelisted(msg.sender) {\n    emit UpdateRoyaltyPercentageFee(artistRoyaltyPercentage, _artistRoyaltyPercentage);\n    artistRoyaltyPercentage = _artistRoyaltyPercentage;\n  }\n\n  function setPlatformPercentage(uint256 _platformFeePercentage) public onlyIfWhitelisted(msg.sender) {\n    emit UpdatePlatformPercentageFee(platformFeePercentage, _platformFeePercentage);\n    platformFeePercentage = _platformFeePercentage;\n  }\n}\n"},"Whitelist.sol":{"content":"pragma solidity ^0.4.24;\n\n\nimport \"./Ownable.sol\";\nimport \"./RBAC.sol\";\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i \u003c _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn\u0027t in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren\u0027t in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i \u003c _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}"}}