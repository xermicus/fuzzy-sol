{"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return add(a, b, \"SafeMath: addition overflow\");\n    }\n\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, errorMessage);\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mul(a, b, \"SafeMath: multiplication overflow\");\n    }\n\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"VestingVault.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.2 \u003c0.8.0;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract VestingVault {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event ChangeBeneficiary(address oldBeneficiary, address newBeneficiary);\r\n\r\n    event Withdraw(address indexed to, uint256 amount);\r\n\r\n    string public name;\r\n\r\n    address public vestingToken;\r\n\r\n    uint256 public constant vestingPeriod = 30 days;\r\n\r\n    uint256 public constant vestingBatchs = 18;\r\n\r\n    uint256 public initialVestedAmount;\r\n\r\n    uint256 public vestingEndTimestamp;\r\n\r\n    address public beneficiary;\r\n\r\n    constructor (string memory name_, address vestingToken_, uint256 initialVestedAmount_, address beneficiary_) {\r\n        name = name_;\r\n        vestingToken = vestingToken_;\r\n        initialVestedAmount = initialVestedAmount_;\r\n        beneficiary = beneficiary_;\r\n        vestingEndTimestamp = block.timestamp + vestingPeriod.mul(vestingBatchs);\r\n    }\r\n\r\n    function setBeneficiary(address newBeneficiary) public {\r\n        require(msg.sender == beneficiary, \"VestingVault.setBeneficiary: can only be called by beneficiary\");\r\n        emit ChangeBeneficiary(beneficiary, newBeneficiary);\r\n        beneficiary = newBeneficiary;\r\n    }\r\n\r\n    function getRemainingLockedAmount() public view returns (uint256) {\r\n        //release discretely on a \"vestingPeriod\" basis (e.g. monthly basis if vestingPeriod = 30 days)\r\n        //after every vestingPeriod, 1 vestingBatch (1/vestingBatchs of initialVestedAmount) is released\r\n        //numOfLockedBatches = vestingEndTimestamp.sub(block.timestamp).div(vestingPeriod).add(1);\r\n        //ratio remaining locked = (1/vestingBatchs) * numOfLockedBatches\r\n        uint256 currentTimestamp = block.timestamp;\r\n        if (currentTimestamp \u003e= vestingEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return vestingEndTimestamp.sub(currentTimestamp).div(vestingPeriod).add(1).mul(initialVestedAmount).div(vestingBatchs);\r\n        }\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount) public {\r\n        require(msg.sender == beneficiary, \"VestingVault.withdraw: can only be called by beneficiary\");\r\n        require(to != address(0), \"VestingVault.withdraw: withdraw to 0 address\");\r\n        IToken(vestingToken).transfer(to, amount);\r\n\r\n        uint256 balance = IToken(vestingToken).balanceOf(address(this));\r\n        require(balance \u003e= getRemainingLockedAmount(), \"VestingVault.withdraw: amount exceeds allowed by schedule\");\r\n\r\n        emit Withdraw(to, amount);\r\n    }\r\n\r\n}\r\n\r\ninterface IToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n"}}