{"IKODAAuction.sol":{"content":"pragma solidity 0.4.24;\n\ninterface IKODAAuction {\n  function setArtistsControlAddressAndEnabledEdition(uint256 _editionNumber, address _address) external;\n}\n"},"IKODAV2SelfServiceEditionCuration.sol":{"content":"pragma solidity 0.4.24;\n\ninterface IKODAV2SelfServiceEditionCuration {\n\n  function createActiveEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenUri,\n    uint256 _totalAvailable\n  ) external returns (bool);\n\n  function artistsEditions(address _artistsAccount) external returns (uint256[1] _editionNumbers);\n\n  function totalAvailableEdition(uint256 _editionNumber) external returns (uint256);\n\n  function highestEditionNumber() external returns (uint256);\n\n  function updateOptionalCommission(uint256 _editionNumber, uint256 _rate, address _recipient) external;\n\n  function updateStartDate(uint256 _editionNumber, uint256 _startDate) external;\n\n  function updateEndDate(uint256 _editionNumber, uint256 _endDate) external;\n\n  function updateEditionType(uint256 _editionNumber, uint256 _editionType) external;\n}\n"},"ISelfServiceAccessControls.sol":{"content":"pragma solidity 0.4.24;\n\ninterface ISelfServiceAccessControls {\n\n  function isEnabledForAccount(address account) public view returns (bool);\n\n}\n"},"ISelfServiceFrequencyControls.sol":{"content":"pragma solidity 0.4.24;\n\ninterface ISelfServiceFrequencyControls {\n\n  /*\n   * Checks is the given artist can create another edition\n   * @param artist - the edition artist\n   * @param totalAvailable - the edition size\n   * @param priceInWei - the edition price in wei\n   */\n  function canCreateNewEdition(address artist) external view returns (bool);\n\n  /*\n   * Records that an edition has been created\n   * @param artist - the edition artist\n   * @param totalAvailable - the edition size\n   * @param priceInWei - the edition price in wei\n   */\n  function recordSuccessfulMint(address artist, uint256 totalAvailable, uint256 priceInWei) external returns (bool);\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}"},"Pausable.sol":{"content":"pragma solidity ^0.4.24;\n\n\nimport \"./Ownable.sol\";\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}"},"RBAC.sol":{"content":"pragma solidity ^0.4.24;\n\nimport \"./Roles.sol\";\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string =\u003e Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i \u003c _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}"},"Roles.sol":{"content":"pragma solidity ^0.4.24;\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address =\u003e bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address\u0027 access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b \u003e 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn\u0027t hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b \u003c= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c \u003e= _a);\n    return c;\n  }\n}"},"SelfServiceEditionCurationV4.sol":{"content":"pragma solidity 0.4.24;\n\nimport \"./Whitelist.sol\";\nimport \"./Pausable.sol\";\nimport \"./SafeMath.sol\";\n\nimport \"./IKODAV2SelfServiceEditionCuration.sol\";\nimport \"./IKODAAuction.sol\";\nimport \"./ISelfServiceAccessControls.sol\";\nimport \"./ISelfServiceFrequencyControls.sol\";\n\n// One invocation per time-period\ncontract SelfServiceEditionCurationV4 is Whitelist, Pausable {\n  using SafeMath for uint256;\n\n  event SelfServiceEditionCreated(\n    uint256 indexed _editionNumber,\n    address indexed _creator,\n    uint256 _priceInWei,\n    uint256 _totalAvailable,\n    bool _enableAuction\n  );\n\n  // Calling address\n  IKODAV2SelfServiceEditionCuration public kodaV2;\n  IKODAAuction public auction;\n  ISelfServiceAccessControls public accessControls;\n  ISelfServiceFrequencyControls public frequencyControls;\n\n  // Default KO commission\n  uint256 public koCommission = 15;\n\n  // Config which enforces editions to not be over this size\n  uint256 public maxEditionSize = 100;\n\n  // Config the minimum price per edition\n  uint256 public minPricePerEdition = 0.01 ether;\n\n  /**\n   * @dev Construct a new instance of the contract\n   */\n  constructor(\n    IKODAV2SelfServiceEditionCuration _kodaV2,\n    IKODAAuction _auction,\n    ISelfServiceAccessControls _accessControls,\n    ISelfServiceFrequencyControls _frequencyControls\n  ) public {\n    super.addAddressToWhitelist(msg.sender);\n    kodaV2 = _kodaV2;\n    auction = _auction;\n    accessControls = _accessControls;\n    frequencyControls = _frequencyControls;\n  }\n\n  /**\n   * @dev Called by artists, create new edition on the KODA platform\n   */\n  function createEdition(\n    bool _enableAuction,\n    address _optionalSplitAddress,\n    uint256 _optionalSplitRate,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    uint256 _endDate,\n    uint256 _artistCommission,\n    uint256 _editionType,\n    string _tokenUri\n  )\n  public\n  whenNotPaused\n  returns (uint256 _editionNumber)\n  {\n    require(frequencyControls.canCreateNewEdition(msg.sender), \u0027Sender currently frozen out of creation\u0027);\n    require(_artistCommission.add(_optionalSplitRate).add(koCommission) \u003c= 100, \"Total commission exceeds 100\");\n\n    uint256 editionNumber = _createEdition(\n      msg.sender,\n      _enableAuction,\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\n      _tokenUri\n    );\n\n    if (_optionalSplitRate \u003e 0 \u0026\u0026 _optionalSplitAddress != address(0)) {\n      kodaV2.updateOptionalCommission(editionNumber, _optionalSplitRate, _optionalSplitAddress);\n    }\n\n    frequencyControls.recordSuccessfulMint(msg.sender, _totalAvailable, _priceInWei);\n\n    return editionNumber;\n  }\n\n  /**\n   * @dev Called by artists, create new edition on the KODA platform, single commission split between artists and KO only\n   */\n  function createEditionSimple(\n    bool _enableAuction,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    uint256 _endDate,\n    uint256 _artistCommission,\n    uint256 _editionType,\n    string _tokenUri\n  )\n  public\n  whenNotPaused\n  returns (uint256 _editionNumber)\n  {\n    require(frequencyControls.canCreateNewEdition(msg.sender), \u0027Sender currently frozen out of creation\u0027);\n    require(_artistCommission.add(koCommission) \u003c= 100, \"Total commission exceeds 100\");\n\n    uint256 editionNumber = _createEdition(\n      msg.sender,\n      _enableAuction,\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\n      _tokenUri\n    );\n\n    frequencyControls.recordSuccessfulMint(msg.sender, _totalAvailable, _priceInWei);\n\n    return editionNumber;\n  }\n\n  /**\n   * @dev Caller by owner, can create editions for other artists\n   * @dev Only callable from owner regardless of pause state\n   */\n  function createEditionFor(\n    address _artist,\n    bool _enableAuction,\n    address _optionalSplitAddress,\n    uint256 _optionalSplitRate,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    uint256 _endDate,\n    uint256 _artistCommission,\n    uint256 _editionType,\n    string _tokenUri\n  )\n  public\n  onlyIfWhitelisted(msg.sender)\n  returns (uint256 _editionNumber)\n  {\n    require(_artistCommission.add(_optionalSplitRate).add(koCommission) \u003c= 100, \"Total commission exceeds 100\");\n\n    uint256 editionNumber = _createEdition(\n      _artist,\n      _enableAuction,\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\n      _tokenUri\n    );\n\n    if (_optionalSplitRate \u003e 0 \u0026\u0026 _optionalSplitAddress != address(0)) {\n      kodaV2.updateOptionalCommission(editionNumber, _optionalSplitRate, _optionalSplitAddress);\n    }\n\n    frequencyControls.recordSuccessfulMint(_artist, _totalAvailable, _priceInWei);\n\n    return editionNumber;\n  }\n\n  /**\n   * @dev Internal function for edition creation\n   */\n  function _createEdition(\n    address _artist,\n    bool _enableAuction,\n    uint256[6] memory _params,\n    string _tokenUri\n  )\n  internal\n  returns (uint256 _editionNumber) {\n\n    uint256 _totalAvailable = _params[0];\n    uint256 _priceInWei = _params[1];\n\n    // Enforce edition size\n    require(msg.sender == owner || (_totalAvailable \u003e 0 \u0026\u0026 _totalAvailable \u003c= maxEditionSize), \"Invalid edition size\");\n\n    // Enforce min price\n    require(msg.sender == owner || _priceInWei \u003e= minPricePerEdition, \"Invalid price\");\n\n    // If we are the owner, skip this artists check\n    require(msg.sender == owner || accessControls.isEnabledForAccount(_artist), \"Not allowed to create edition\");\n\n    // Find the next edition number we can use\n    uint256 editionNumber = getNextAvailableEditionNumber();\n\n    require(\n      kodaV2.createActiveEdition(\n        editionNumber,\n        0x0, // _editionData - no edition data\n        _params[5], //_editionType,\n        _params[2], // _startDate,\n        _params[3], //_endDate,\n        _artist,\n        _params[4], // _artistCommission - defaults to artistCommission if optional commission split missing\n        _priceInWei,\n        _tokenUri,\n        _totalAvailable\n      ),\n      \"Failed to create new edition\"\n    );\n\n    // Enable the auction if desired\n    if (_enableAuction) {\n      auction.setArtistsControlAddressAndEnabledEdition(editionNumber, _artist);\n    }\n\n    // Trigger event\n    emit SelfServiceEditionCreated(editionNumber, _artist, _priceInWei, _totalAvailable, _enableAuction);\n\n    return editionNumber;\n  }\n\n  /**\n   * @dev Internal function for dynamically generating the next KODA edition number\n   */\n  function getNextAvailableEditionNumber() internal returns (uint256 editionNumber) {\n\n    // Get current highest edition and total in the edition\n    uint256 highestEditionNumber = kodaV2.highestEditionNumber();\n    uint256 totalAvailableEdition = kodaV2.totalAvailableEdition(highestEditionNumber);\n\n    // Add the current highest plus its total, plus 1 as tokens start at 1 not zero\n    uint256 nextAvailableEditionNumber = highestEditionNumber.add(totalAvailableEdition).add(1);\n\n    // Round up to next 100, 1000 etc based on max allowed size\n    return ((nextAvailableEditionNumber + maxEditionSize - 1) / maxEditionSize) * maxEditionSize;\n  }\n\n  /**\n   * @dev Sets the KODA address\n   * @dev Only callable from owner\n   */\n  function setKodavV2(IKODAV2SelfServiceEditionCuration _kodaV2) onlyIfWhitelisted(msg.sender) public {\n    kodaV2 = _kodaV2;\n  }\n\n  /**\n   * @dev Sets the KODA auction\n   * @dev Only callable from owner\n   */\n  function setAuction(IKODAAuction _auction) onlyIfWhitelisted(msg.sender) public {\n    auction = _auction;\n  }\n\n  /**\n   * @dev Sets the default KO commission for each edition\n   * @dev Only callable from owner\n   */\n  function setKoCommission(uint256 _koCommission) onlyIfWhitelisted(msg.sender) public {\n    koCommission = _koCommission;\n  }\n\n  /**\n   * @dev Sets the max edition size\n   * @dev Only callable from owner\n   */\n  function setMaxEditionSize(uint256 _maxEditionSize) onlyIfWhitelisted(msg.sender) public {\n    maxEditionSize = _maxEditionSize;\n  }\n\n  /**\n   * @dev Sets minimum price per edition\n   * @dev Only callable from owner\n   */\n  function setMinPricePerEdition(uint256 _minPricePerEdition) onlyIfWhitelisted(msg.sender) public {\n    minPricePerEdition = _minPricePerEdition;\n  }\n\n  /**\n   * @dev Checks to see if the account is currently frozen out\n   */\n  function isFrozen(address account) public view returns (bool) {\n    return frequencyControls.canCreateNewEdition(account);\n  }\n\n  /**\n   * @dev Checks to see if the account can create editions\n   */\n  function isEnabledForAccount(address account) public view returns (bool) {\n    return accessControls.isEnabledForAccount(account);\n  }\n\n  /**\n   * @dev Checks to see if the account can create editions\n   */\n  function canCreateAnotherEdition(address account) public view returns (bool) {\n    if (!accessControls.isEnabledForAccount(account)) {\n      return false;\n    }\n    return frequencyControls.canCreateNewEdition(account);\n  }\n\n  /**\n   * @dev Allows for the ability to extract stuck ether\n   * @dev Only callable from owner\n   */\n  function withdrawStuckEther(address _withdrawalAccount) onlyIfWhitelisted(msg.sender) public {\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\n    _withdrawalAccount.transfer(address(this).balance);\n  }\n}\n"},"Whitelist.sol":{"content":"pragma solidity ^0.4.24;\n\n\nimport \"./Ownable.sol\";\nimport \"./RBAC.sol\";\n\n\n/**\n * @title Whitelist\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n * This simplifies the implementation of \"user permissions\".\n */\ncontract Whitelist is Ownable, RBAC {\n  string public constant ROLE_WHITELISTED = \"whitelist\";\n\n  /**\n   * @dev Throws if operator is not whitelisted.\n   * @param _operator address\n   */\n  modifier onlyIfWhitelisted(address _operator) {\n    checkRole(_operator, ROLE_WHITELISTED);\n    _;\n  }\n\n  /**\n   * @dev add an address to the whitelist\n   * @param _operator address\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n   */\n  function addAddressToWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    addRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev getter to determine if address is in whitelist\n   */\n  function whitelist(address _operator)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev add addresses to the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was added to the whitelist,\n   * false if all addresses were already in the whitelist\n   */\n  function addAddressesToWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i \u003c _operators.length; i++) {\n      addAddressToWhitelist(_operators[i]);\n    }\n  }\n\n  /**\n   * @dev remove an address from the whitelist\n   * @param _operator address\n   * @return true if the address was removed from the whitelist,\n   * false if the address wasn\u0027t in the whitelist in the first place\n   */\n  function removeAddressFromWhitelist(address _operator)\n    public\n    onlyOwner\n  {\n    removeRole(_operator, ROLE_WHITELISTED);\n  }\n\n  /**\n   * @dev remove addresses from the whitelist\n   * @param _operators addresses\n   * @return true if at least one address was removed from the whitelist,\n   * false if all addresses weren\u0027t in the whitelist in the first place\n   */\n  function removeAddressesFromWhitelist(address[] _operators)\n    public\n    onlyOwner\n  {\n    for (uint256 i = 0; i \u003c _operators.length; i++) {\n      removeAddressFromWhitelist(_operators[i]);\n    }\n  }\n\n}"}}