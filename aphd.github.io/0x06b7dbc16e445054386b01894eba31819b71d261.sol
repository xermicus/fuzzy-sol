{"ballot.sol":{"content":"pragma solidity ^0.4.19;\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\ncontract TokenERC20 {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply;\r\n\r\n\t// ��mapping����ÿ����ַ��Ӧ�����\r\n\tmapping (address =\u003e uint256) public balanceOf;\r\n\t// �洢���˺ŵĿ���\r\n\tmapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n\t// �¼�������֪ͨ�ͻ��˽��׷���\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\t// �¼�������֪ͨ�ͻ��˴��ұ�����\r\n\tevent Burn(address indexed from, uint256 value);\r\n\t\r\n\t/*\r\n\t*��ʼ������\r\n\t*/\r\n\tfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // ��Ӧ�ķݶ�ݶ����С�Ĵ��ҵ�λ�йأ��ݶ� = ��\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // ������ӵ�����еĴ���\r\n\t\tname = tokenName;                                   // ��������\r\n\t\tsymbol = tokenSymbol;                               // ���ҷ���\r\n}\r\n\r\n\t//���ҽ���ת�Ƶ��ڲ�ʵ��\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// ȷ��Ŀ���ַ��Ϊ0x0����Ϊ0x0��ַ��������\r\n\t\trequire(_to != 0x0);\r\n\t\t// ��鷢�������\r\n\t\trequire(balanceOf[_from] \u003e= _value);\r\n\t\t// ȷ��ת��Ϊ������\r\n\t\trequire(balanceOf[_to] + _value \u003e balanceOf[_to]);\r\n\t\t\r\n\t\t// ����������齻�ף�\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\tTransfer(_from, _to, _value);\r\n\t\t\r\n\t\t// ��assert���������߼���\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n}\r\n\r\n\t/*****\r\n\t**���ҽ���ת��\r\n\t**���Լ������������ߣ��˺ŷ���`_value`�����ҵ� `_to`�˺�\r\n\t**@param _to �����ߵ�ַ\r\n\t**@param _value ת������\r\n\t**/\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t }\r\n\t \r\n\t /*****\r\n\t**�˺�֮����ҽ���ת��\r\n\t**@param _from �����ߵ�ַ\r\n\t**@param _to �����ߵ�ַ\r\n\t**@param _value ת������\r\n\t**/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value \u003c= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t /*****\r\n\t**����ĳ����ַ����Լ�����Դ������������廨�ѵĴ�����\r\n\t**���������`_spender` ���Ѳ����� `_value` ������\r\n\t**@param _spender The address authorized to spend\r\n\t**@param _value the max amount they can spend\r\n\t**/\r\n\tfunction approve(address _spender, uint256 _value) public\r\n\t\treturns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\t/*****\r\n\t**��������һ����ַ����Լ�����ң����������ߣ����������໨�ѵĴ�����\r\n\t**@param _spender ����Ȩ�ĵ�ַ����Լ��\r\n\t**@param _value ���ɻ��Ѵ�����\r\n\t**@param _extraData ���͸���Լ�ĸ�������\r\n\t**/\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\t public\r\n\t returns (bool success) {\r\n\t tokenRecipient spender = tokenRecipient(_spender);\r\n\t if (approve(_spender, _value)) {\r\n\t\t// ֪ͨ��Լ\r\n\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\treturn true;\r\n\t\t}\r\n\t }\r\n\t///�����ң����������ߣ��˻���ָ��������\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] \u003e= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\tBurn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\t/*****\r\n\t**�����û��˻���ָ��������\r\n\t**Remove `_value` tokens from the system irreversibly on behalf of `_from\r\n\t**@param _from the address of the sender\r\n\t**@param _value the amount of money to burn\r\n\t**/\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] \u003e= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value \u003c= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender\u0027s allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\tBurn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.4.19;\r\n \r\ncontract Token {\r\n    /// token������Ĭ�ϻ�Ϊpublic��������һ��getter�����ӿڣ�����ΪtotalSupply().\r\n    uint256 public totalSupply;\r\n \r\n    /// ��ȡ�˻�_ownerӵ��token������\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n \r\n    //����Ϣ�������˻�����_to�˻�ת����Ϊ_value��token\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n \r\n    //���˻�_from�����˻�_toת����Ϊ_value��token����approve�������ʹ��\r\n    function transferFrom(address _from, address _to, uint256 _value) returns  (bool success);\r\n \r\n    //��Ϣ�����˻������˻�_spender�ܴӷ����˻���ת������Ϊ_value��token\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n \r\n    //��ȡ�˻�_spender���Դ��˻�_owner��ת��token������\r\n    function allowance(address _owner, address _spender) constant returns  (uint256 remaining);\r\n \r\n    //����ת��ʱ����Ҫ�������¼� \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    //������approve(address _spender, uint256 _value)�ɹ�ִ��ʱ���봥�����¼�\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n"},"TokenERC20.sol":{"content":"pragma solidity ^0.4.19;\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\ncontract TokenERC20 {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply;\r\n\r\n\t// ��mapping����ÿ����ַ��Ӧ�����\r\n\tmapping (address =\u003e uint256) public balanceOf;\r\n\t// �洢���˺ŵĿ���\r\n\tmapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n\t// �¼�������֪ͨ�ͻ��˽��׷���\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\t// �¼�������֪ͨ�ͻ��˴��ұ�����\r\n\tevent Burn(address indexed from, uint256 value);\r\n\t\r\n\t/*\r\n\t*��ʼ������\r\n\t*/\r\n\tfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // ��Ӧ�ķݶ�ݶ����С�Ĵ��ҵ�λ�йأ��ݶ� = ��\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // ������ӵ�����еĴ���\r\n\t\tname = tokenName;                                   // ��������\r\n\t\tsymbol = tokenSymbol;                               // ���ҷ���\r\n}\r\n}"}}