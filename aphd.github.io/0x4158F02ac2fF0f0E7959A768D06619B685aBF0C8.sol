{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/release/core/fund-deployer/IFundDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IFundDeployer Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IFundDeployer {\n    enum ReleaseStatus {PreLaunch, Live, Paused}\n\n    function getOwner() external view returns (address);\n\n    function getReleaseStatus() external view returns (ReleaseStatus);\n\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\n}\n"
    },
    "contracts/release/extensions/utils/FundDeployerOwnerMixin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../../core/fund-deployer/IFundDeployer.sol\";\n\n/// @title FundDeployerOwnerMixin Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\nabstract contract FundDeployerOwnerMixin {\n    address internal immutable FUND_DEPLOYER;\n\n    modifier onlyFundDeployerOwner() {\n        require(\n            msg.sender == getOwner(),\n            \"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\"\n        );\n        _;\n    }\n\n    constructor(address _fundDeployer) public {\n        FUND_DEPLOYER = _fundDeployer;\n    }\n\n    /// @notice Gets the owner of this contract\n    /// @return owner_ The owner\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\n    function getOwner() public view returns (address owner_) {\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `FUND_DEPLOYER` variable\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\n    function getFundDeployer() external view returns (address fundDeployer_) {\n        return FUND_DEPLOYER;\n    }\n}\n"
    },
    "contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IDerivativePriceFeed Interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Simple interface for derivative price source oracle implementations\ninterface IDerivativePriceFeed {\n    function calcUnderlyingValues(address, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function isSupportedAsset(address) external view returns (bool);\n}\n"
    },
    "contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../../../../extensions/utils/FundDeployerOwnerMixin.sol\";\nimport \"../../../../interfaces/ISynthetix.sol\";\nimport \"../../../../interfaces/ISynthetixAddressResolver.sol\";\nimport \"../../../../interfaces/ISynthetixExchangeRates.sol\";\nimport \"../../../../interfaces/ISynthetixProxyERC20.sol\";\nimport \"../../../../interfaces/ISynthetixSynth.sol\";\nimport \"../IDerivativePriceFeed.sol\";\n\n/// @title SynthetixPriceFeed Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A price feed that uses Synthetix oracles as price sources\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\n    using SafeMath for uint256;\n\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\n\n    event SynthCurrencyKeyUpdated(\n        address indexed synth,\n        bytes32 prevCurrencyKey,\n        bytes32 nextCurrencyKey\n    );\n\n    uint256 private constant SYNTH_UNIT = 10**18;\n    address private immutable ADDRESS_RESOLVER;\n    address private immutable SUSD;\n\n    mapping(address => bytes32) private synthToCurrencyKey;\n\n    constructor(\n        address _fundDeployer,\n        address _addressResolver,\n        address _sUSD,\n        address[] memory _synths\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\n        ADDRESS_RESOLVER = _addressResolver;\n        SUSD = _sUSD;\n\n        address[] memory sUSDSynths = new address[](1);\n        sUSDSynths[0] = _sUSD;\n\n        __addSynths(sUSDSynths);\n        __addSynths(_synths);\n    }\n\n    /// @notice Converts a given amount of a derivative to its underlying asset values\n    /// @param _derivative The derivative to convert\n    /// @param _derivativeAmount The amount of the derivative to convert\n    /// @return underlyings_ The underlying assets for the _derivative\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\n        external\n        override\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\n    {\n        underlyings_ = new address[](1);\n        underlyings_[0] = SUSD;\n        underlyingAmounts_ = new uint256[](1);\n\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\n        require(currencyKey != 0, \"calcUnderlyingValues: _derivative is not supported\");\n\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\n            \"ExchangeRates\",\n            \"calcUnderlyingValues: Missing ExchangeRates\"\n        );\n\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\n            currencyKey\n        );\n        require(!isInvalid, \"calcUnderlyingValues: _derivative rate is not valid\");\n\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\n\n        return (underlyings_, underlyingAmounts_);\n    }\n\n    /// @notice Checks whether an asset is a supported primitive of the price feed\n    /// @param _asset The asset to check\n    /// @return isSupported_ True if the asset is a supported primitive\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\n        return getCurrencyKeyForSynth(_asset) != 0;\n    }\n\n    /////////////////////\n    // SYNTHS REGISTRY //\n    /////////////////////\n\n    /// @notice Adds Synths to the price feed\n    /// @param _synths Synths to add\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\n        require(_synths.length > 0, \"addSynths: Empty _synths\");\n\n        __addSynths(_synths);\n    }\n\n    /// @notice Updates the cached currencyKey value for specified Synths\n    /// @param _synths Synths to update\n    /// @dev Anybody can call this function\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\n        require(_synths.length > 0, \"updateSynthCurrencyKeys: Empty _synths\");\n\n        for (uint256 i; i < _synths.length; i++) {\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\n            require(prevCurrencyKey != 0, \"updateSynthCurrencyKeys: Synth not set\");\n\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\n            require(\n                nextCurrencyKey != prevCurrencyKey,\n                \"updateSynthCurrencyKeys: Synth has correct currencyKey\"\n            );\n\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\n\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\n        }\n    }\n\n    /// @dev Helper to add Synths\n    function __addSynths(address[] memory _synths) private {\n        for (uint256 i; i < _synths.length; i++) {\n            require(synthToCurrencyKey[_synths[i]] == 0, \"__addSynths: Value already set\");\n\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\n            require(currencyKey != 0, \"__addSynths: No currencyKey\");\n\n            synthToCurrencyKey[_synths[i]] = currencyKey;\n\n            emit SynthAdded(_synths[i], currencyKey);\n        }\n    }\n\n    /// @dev Helper to query a currencyKey from Synthetix\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\n    function getAddressResolver() external view returns (address) {\n        return ADDRESS_RESOLVER;\n    }\n\n    /// @notice Gets the currencyKey for multiple given Synths\n    /// @return currencyKeys_ The currencyKey values\n    function getCurrencyKeysForSynths(address[] calldata _synths)\n        external\n        view\n        returns (bytes32[] memory currencyKeys_)\n    {\n        currencyKeys_ = new bytes32[](_synths.length);\n        for (uint256 i; i < _synths.length; i++) {\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\n        }\n\n        return currencyKeys_;\n    }\n\n    /// @notice Gets the `SUSD` variable\n    /// @return susd_ The `SUSD` variable value\n    function getSUSD() external view returns (address susd_) {\n        return SUSD;\n    }\n\n    /// @notice Gets the currencyKey for a given Synth\n    /// @return currencyKey_ The currencyKey value\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\n        return synthToCurrencyKey[_synth];\n    }\n}\n"
    },
    "contracts/release/interfaces/ISynthetix.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ISynthetix Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ISynthetix {\n    function exchangeOnBehalfWithTracking(\n        address,\n        bytes32,\n        uint256,\n        bytes32,\n        address,\n        bytes32\n    ) external returns (uint256);\n}\n"
    },
    "contracts/release/interfaces/ISynthetixAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ISynthetixAddressResolver Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ISynthetixAddressResolver {\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ISynthetixExchangeRates.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ISynthetixExchangeRates Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ISynthetixExchangeRates {\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\n}\n"
    },
    "contracts/release/interfaces/ISynthetixProxyERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ISynthetixProxyERC20 Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ISynthetixProxyERC20 {\n    function target() external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ISynthetixSynth.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ISynthetixSynth Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ISynthetixSynth {\n    function currencyKey() external view returns (bytes32);\n}\n"
    }
  }
}}