{"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(\n        address indexed oldOwner,\n        address indexed newOwner\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"O: caller must be the owner\");\n        _;\n    }\n\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    function renounceOwnership() external onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(\n            newOwner != address(0),\n            \"O: new owner must not be the zero address\"\n        );\n\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) internal {\n        address oldOwner = owner;\n        owner = newOwner;\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"Test.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"Ownable.sol\";\n\ncontract Test is Ownable {\n    string internal _greeting;\n\n    constructor(string memory greeting) {\n        _greeting = greeting;\n    }\n\n    function greet() external view returns (string memory) {\n        return _greeting;\n    }\n\n    function setGreeting(string memory greeting) external onlyOwner {\n        _greeting = greeting;\n    }\n}\n"}}