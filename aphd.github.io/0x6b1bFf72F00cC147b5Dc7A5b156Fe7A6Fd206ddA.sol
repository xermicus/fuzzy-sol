{{
  "language": "Solidity",
  "sources": {
    "./contracts/governance/AirDrop.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ninterface IVestable {\n    function vest(address _receiver, uint256 _amount) external;\n}\n\ncontract AirDrop is Ownable {\n    struct DropInfo {\n        bytes32 root;\n        uint128 total;\n        uint128 remaining;\n    }\n\n    mapping(uint256 => DropInfo) public drops;\n    uint256 public tranches;\n\n    mapping(uint256 => mapping(address => bool)) private claimed;\n    IVestable public vesting;\n\n    event LogNewDrop(uint256 trancheId, bytes32 merkleRoot, uint128 totalAmount);\n    event LogClaim(address indexed account, uint256 trancheId, uint128 amount);\n    event LogExpireDrop(uint256 trancheId, bytes32 merkleRoot, uint128 totalAmount, uint128 remaining);\n\n    function setVesting(address _vesting) public onlyOwner {\n        vesting = IVestable(_vesting);\n    }\n\n    function newDrop(bytes32 merkleRoot, uint128 totalAmount) external onlyOwner returns (uint256 trancheId) {\n        trancheId = tranches;\n        DropInfo memory di = DropInfo(merkleRoot, totalAmount, totalAmount);\n        drops[trancheId] = di;\n        tranches += 1;\n\n        emit LogNewDrop(trancheId, merkleRoot, totalAmount);\n    }\n\n    function expireDrop(uint256 trancheId) external onlyOwner {\n        require(trancheId < tranches, \"expireDrop: !trancheId\");\n        DropInfo memory di = drops[trancheId];\n        delete drops[trancheId];\n\n        emit LogExpireDrop(trancheId, di.root, di.total, di.remaining);\n    }\n\n    function isClaimed(uint256 trancheId, address account) public view returns (bool) {\n        return claimed[trancheId][account];\n    }\n\n    function claim(\n        uint256 trancheId,\n        uint128 amount,\n        bytes32[] calldata merkleProof\n    ) external {\n        require(trancheId < tranches, \"claim: !trancheId\");\n        require(!isClaimed(trancheId, msg.sender), \"claim: Drop already claimed\");\n        DropInfo storage di = drops[trancheId];\n        bytes32 root = di.root;\n        require(root != 0, \"claim: Drop expired\");\n        uint128 remaining = di.remaining;\n        require(amount <= remaining, \"claim: Not enough remaining\");\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, amount));\n        require(MerkleProof.verify(merkleProof, root, node), \"claim: Invalid proof\");\n\n        // Mark it claimed and send the token.\n        claimed[trancheId][msg.sender] = true;\n        di.remaining = remaining - amount;\n        vesting.vest(msg.sender, amount);\n\n        emit LogClaim(msg.sender, trancheId, amount);\n    }\n\n    function verifyDrop(\n        uint256 trancheId,\n        uint128 amount,\n        bytes32[] calldata merkleProof\n    ) external view returns (bool) {\n        require(trancheId < tranches, \"verifyDrop: !trancheId\");\n        require(!isClaimed(trancheId, msg.sender), \"verifyDrop: Drop already claimed\");\n        DropInfo storage di = drops[trancheId];\n        bytes32 root = di.root;\n        require(root != 0, \"verifyDrop: Drop expired\");\n        require(amount <= di.remaining, \"verifyDrop: Not enough remaining\");\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, amount));\n        return MerkleProof.verify(merkleProof, root, node);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}