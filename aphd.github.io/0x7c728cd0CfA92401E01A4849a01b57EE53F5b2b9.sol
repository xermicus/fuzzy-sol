{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/persistent/dispatcher/IDispatcher.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IDispatcher Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IDispatcher {\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\n\n    function claimOwnership() external;\n\n    function deployVaultProxy(\n        address _vaultLib,\n        address _owner,\n        address _vaultAccessor,\n        string calldata _fundName\n    ) external returns (address vaultProxy_);\n\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\n\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\n\n    function getFundDeployerForVaultProxy(address _vaultProxy)\n        external\n        view\n        returns (address fundDeployer_);\n\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\n        external\n        view\n        returns (\n            address nextFundDeployer_,\n            address nextVaultAccessor_,\n            address nextVaultLib_,\n            uint256 executableTimestamp_\n        );\n\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\n\n    function getNominatedOwner() external view returns (address nominatedOwner_);\n\n    function getOwner() external view returns (address owner_);\n\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\n\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (uint256 secondsRemaining_);\n\n    function hasExecutableMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (bool hasExecutableRequest_);\n\n    function hasMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (bool hasMigrationRequest_);\n\n    function removeNominatedOwner() external;\n\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\n\n    function setMigrationTimelock(uint256 _nextTimelock) external;\n\n    function setNominatedOwner(address _nextNominatedOwner) external;\n\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\n\n    function signalMigration(\n        address _vaultProxy,\n        address _nextVaultAccessor,\n        address _nextVaultLib,\n        bool _bypassFailure\n    ) external;\n}\n"
    },
    "contracts/persistent/off-chain/fund-value-calculator/FundValueCalculatorRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../../dispatcher/IDispatcher.sol\";\nimport \"./IFundValueCalculator.sol\";\n\n/// @title FundValueCalculatorRouter Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A peripheral contract for routing value calculation requests\n/// to the correct FundValueCalculator instance for a particular release\n/// @dev These values should generally only be consumed from off-chain,\n/// unless you understand how each release interprets each calculation\ncontract FundValueCalculatorRouter {\n    event FundValueCalculatorUpdated(address indexed fundDeployer, address fundValueCalculator);\n\n    address private immutable DISPATCHER;\n\n    mapping(address => address) private fundDeployerToFundValueCalculator;\n\n    constructor(\n        address _dispatcher,\n        address[] memory _fundDeployers,\n        address[] memory _fundValueCalculators\n    ) public {\n        DISPATCHER = _dispatcher;\n\n        __setFundValueCalculators(_fundDeployers, _fundValueCalculators);\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    /// @notice Calculates the GAV for a given fund\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @return denominationAsset_ The denomination asset of the fund\n    /// @return gav_ The GAV quoted in the denomination asset\n    function calcGav(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 gav_)\n    {\n        return getFundValueCalculatorForVault(_vaultProxy).calcGav(_vaultProxy);\n    }\n\n    /// @notice Calculates the GAV for a given fund, quoted in a given asset\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @param _quoteAsset The quote asset\n    /// @return gav_ The GAV quoted in _quoteAsset\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 gav_)\n    {\n        return\n            getFundValueCalculatorForVault(_vaultProxy).calcGavInAsset(_vaultProxy, _quoteAsset);\n    }\n\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @return denominationAsset_ The denomination asset of the fund\n    /// @return grossShareValue_ The gross share value quoted in the denomination asset\n    function calcGrossShareValue(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 grossShareValue_)\n    {\n        return getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValue(_vaultProxy);\n    }\n\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @param _quoteAsset The quote asset\n    /// @return grossShareValue_ The gross share value quoted in _quoteAsset\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 grossShareValue_)\n    {\n        return\n            getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValueInAsset(\n                _vaultProxy,\n                _quoteAsset\n            );\n    }\n\n    /// @notice Calculates the NAV for a given fund\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @return denominationAsset_ The denomination asset of the fund\n    /// @return nav_ The NAV quoted in the denomination asset\n    function calcNav(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 nav_)\n    {\n        return getFundValueCalculatorForVault(_vaultProxy).calcNav(_vaultProxy);\n    }\n\n    /// @notice Calculates the NAV for a given fund, quoted in a given asset\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @param _quoteAsset The quote asset\n    /// @return nav_ The NAV quoted in _quoteAsset\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 nav_)\n    {\n        return\n            getFundValueCalculatorForVault(_vaultProxy).calcNavInAsset(_vaultProxy, _quoteAsset);\n    }\n\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @return denominationAsset_ The denomination asset of the fund\n    /// @return netShareValue_ The net share value quoted in the denomination asset\n    function calcNetShareValue(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 netShareValue_)\n    {\n        return getFundValueCalculatorForVault(_vaultProxy).calcNetShareValue(_vaultProxy);\n    }\n\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @param _quoteAsset The quote asset\n    /// @return netShareValue_ The net share value quoted in _quoteAsset\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 netShareValue_)\n    {\n        return\n            getFundValueCalculatorForVault(_vaultProxy).calcNetShareValueInAsset(\n                _vaultProxy,\n                _quoteAsset\n            );\n    }\n\n    /// @notice Calculates the net value of all shares held by a specified account\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @param _sharesHolder The account holding shares\n    /// @return denominationAsset_ The denomination asset of the fund\n    /// @return netValue_ The net value of all shares held by _sharesHolder\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\n        external\n        returns (address denominationAsset_, uint256 netValue_)\n    {\n        return\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolder(\n                _vaultProxy,\n                _sharesHolder\n            );\n    }\n\n    /// @notice Calculates the net value of all shares held by a specified account, quoted in a given asset\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @param _sharesHolder The account holding shares\n    /// @param _quoteAsset The quote asset\n    /// @return netValue_ The net value of all shares held by _sharesHolder quoted in _quoteAsset\n    function calcNetValueForSharesHolderInAsset(\n        address _vaultProxy,\n        address _sharesHolder,\n        address _quoteAsset\n    ) external returns (uint256 netValue_) {\n        return\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolderInAsset(\n                _vaultProxy,\n                _sharesHolder,\n                _quoteAsset\n            );\n    }\n\n    // PUBLIC FUNCTIONS\n\n    /// @notice Gets the FundValueCalculator instance to use for a given fund\n    /// @param _vaultProxy The VaultProxy of the fund\n    /// @return fundValueCalculatorContract_ The FundValueCalculator instance\n    function getFundValueCalculatorForVault(address _vaultProxy)\n        public\n        view\n        returns (IFundValueCalculator fundValueCalculatorContract_)\n    {\n        address fundDeployer = IDispatcher(DISPATCHER).getFundDeployerForVaultProxy(_vaultProxy);\n        require(fundDeployer != address(0), \"getFundValueCalculatorForVault: Invalid _vaultProxy\");\n\n        address fundValueCalculator = getFundValueCalculatorForFundDeployer(fundDeployer);\n        require(\n            fundValueCalculator != address(0),\n            \"getFundValueCalculatorForVault: No FundValueCalculator set\"\n        );\n\n        return IFundValueCalculator(fundValueCalculator);\n    }\n\n    ////////////////////////////\n    // FUND VALUE CALCULATORS //\n    ////////////////////////////\n\n    /// @notice Sets FundValueCalculator instances for a list of FundDeployer instances\n    /// @param _fundDeployers The FundDeployer instances\n    /// @param _fundValueCalculators The FundValueCalculator instances corresponding\n    /// to each instance in _fundDeployers\n    function setFundValueCalculators(\n        address[] memory _fundDeployers,\n        address[] memory _fundValueCalculators\n    ) external {\n        require(\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\n            \"Only the Dispatcher owner can call this function\"\n        );\n\n        __setFundValueCalculators(_fundDeployers, _fundValueCalculators);\n    }\n\n    /// @dev Helper to set FundValueCalculator addresses respectively for given FundDeployers\n    function __setFundValueCalculators(\n        address[] memory _fundDeployers,\n        address[] memory _fundValueCalculators\n    ) private {\n        require(\n            _fundDeployers.length == _fundValueCalculators.length,\n            \"__setFundValueCalculators: Unequal array lengths\"\n        );\n\n        for (uint256 i; i < _fundDeployers.length; i++) {\n            fundDeployerToFundValueCalculator[_fundDeployers[i]] = _fundValueCalculators[i];\n\n            emit FundValueCalculatorUpdated(_fundDeployers[i], _fundValueCalculators[i]);\n        }\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `DISPATCHER` variable\n    /// @return dispatcher_ The `DISPATCHER` variable value\n    function getDispatcher() public view returns (address dispatcher_) {\n        return DISPATCHER;\n    }\n\n    /// @notice Gets the FundValueCalculator address for a given FundDeployer\n    /// @param _fundDeployer The FundDeployer for which to get the FundValueCalculator address\n    /// @return fundValueCalculator_ The FundValueCalculator address\n    function getFundValueCalculatorForFundDeployer(address _fundDeployer)\n        public\n        view\n        returns (address fundValueCalculator_)\n    {\n        return fundDeployerToFundValueCalculator[_fundDeployer];\n    }\n}\n"
    },
    "contracts/persistent/off-chain/fund-value-calculator/IFundValueCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IFundValueCalculator interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IFundValueCalculator {\n    function calcGav(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 gav_);\n\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 gav_);\n\n    function calcGrossShareValue(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 grossShareValue_);\n\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 grossShareValue_);\n\n    function calcNav(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 nav_);\n\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 nav_);\n\n    function calcNetShareValue(address _vaultProxy)\n        external\n        returns (address denominationAsset_, uint256 netShareValue_);\n\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\n        external\n        returns (uint256 netShareValue_);\n\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\n        external\n        returns (address denominationAsset_, uint256 netValue_);\n\n    function calcNetValueForSharesHolderInAsset(\n        address _vaultProxy,\n        address _sharesHolder,\n        address _quoteAsset\n    ) external returns (uint256 netValue_);\n}\n"
    }
  }
}}