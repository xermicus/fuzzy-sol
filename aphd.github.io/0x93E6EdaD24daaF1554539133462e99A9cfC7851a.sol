{"ChangeLogicAndCallSpell.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.9;\r\n\r\nimport \"./IProxyAdmin.sol\";\r\n\r\n/**\r\n * @title ChangeLogicAndCallSpell\r\n * @author Alexander Schlindwein\r\n *\r\n * Spell to change the logic of a proxy contract and call an initializer\r\n */\r\ncontract ChangeLogicAndCallSpell {\r\n\r\n    /**\r\n     * Changes the logic contract of a proxy contract\r\n     *\r\n     * @param proxyAdmin The address of the proxy admin contract\r\n     * @param proxy The address of the proxy contract\r\n     * @param newLogic The address of the new logic contract\r\n     * @param data The calldata for the call\r\n     */\r\n    function execute(address proxyAdmin, address payable proxy, address newLogic, bytes calldata data) external {\r\n        IProxyAdmin(proxyAdmin).upgradeAndCall(proxy, newLogic, data);\r\n    }\r\n}\r\n"},"IProxyAdmin.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface IProxyAdmin {\r\n  function upgrade(address proxy, address implementation) external;\r\n  function upgradeAndCall(address proxy, address implementation, bytes memory data) external payable;\r\n}"}}