{"Airdrop.sol":{"content":"  // SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\ninterface IERC20 { \r\n   function transfer(address recipient, uint256 amount) external returns (bool);  \r\n} \r\n\r\ncontract CRDNetworkAirdropV3 is Ownable { \r\n   \r\n    address private admin;     \r\n    address public token;   \r\n    uint256 public reward;  \r\n    mapping (address =\u003e bool) private processedRewards; \r\n    \r\n    constructor(address _token, uint _reward, address _admin) Ownable() {\r\n        token = _token; \r\n        reward = _reward; \r\n        admin = _admin;\r\n    }  \r\n      \r\n    function claimReward(bytes calldata signature ) public {  \r\n        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender)));  \r\n        require (recoverSigner(message, signature) == admin , \u0027Wrong signature\u0027); \r\n        require (processedRewards[msg.sender] == false, \u0027Reward already processed\u0027);  \r\n        IERC20(token).transfer(msg.sender, reward); \r\n        processedRewards[msg.sender] = true;  \r\n    }  \r\n    \r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked( \u0027\\x19Ethereum Signed Message:\\n32\u0027,   hash  ));\r\n    } \r\n    \r\n    function recoverSigner(bytes32 message, bytes memory sig)  internal pure returns (address)  {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n  \r\n        (v, r, s) = splitSignature(sig); \r\n        return ecrecover(message, v, r, s);\r\n    } \r\n\r\n    function splitSignature(bytes memory sig)  internal  pure  returns (uint8, bytes32, bytes32) {\r\n        require(sig.length == 65); \r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n  \r\n        assembly { \r\n            r := mload(add(sig, 32)) \r\n            s := mload(add(sig, 64)) \r\n            v := byte(0, mload(add(sig, 96)))\r\n        } \r\n        return (v, r, s);\r\n    }\r\n     \r\n    function checkStatus(address  _address) public view returns(bool) { \r\n        return (processedRewards[_address]);\r\n    }\r\n     \r\n    function setReward(uint256 _reward) public onlyOwner { \r\n        reward = _reward; \r\n    }  \r\n    \r\n    function setToken(address _token) public onlyOwner { \r\n        token = _token; \r\n    } \r\n    \r\n    function resetAdmin(address _admin) public onlyOwner { \r\n        admin = _admin; \r\n    }  \r\n    \r\n    function withdraw(  uint _amount, address _token) public  onlyOwner returns (bool){  \r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n        return true;\r\n    }  \r\n       \r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}